**Git Basics: Clone, Push, and Pull**

**Git Clone:**
- **Purpose:** Create a local copy of a remote repository.
- **Usage:** Initiate work on an existing project.
- **Command:** `git clone [Repository URL]`

**********************************************************************************

**Making Changes:**
- Modify or add files as required.

**********************************************************************************

**Git Add:**
- **Purpose:** Stage changes for committing.
- **Command:** `git add .` or selectively `git add <file1> <file2>`

**********************************************************************************

**Git Commit:**
- **Purpose:** Record changes in the repository's history.
- **Command:** `git commit -m "Descriptive message"`

**********************************************************************************

**Git Push:**
- **Purpose:** Upload local repository content to a remote repository.
- **Command:** `git push origin main` (modify branch name as needed).

**********************************************************************************

**Git Pull:**
- **Purpose:** Update the local repository with remote changes.
- **Command:** `git pull origin main` (adjust for different branches).
- **Note:** Essential to pull before new tasks to sync with remote updates.

**********************************************************************************

**Managing Staged Changes: How to Unstage Files**

- **Command:** `git restore --staged <filename>` for specific files.
- Examples:
  1. **Single File:** `git restore --staged example.txt`
  2. **Multiple Files:** `git restore --staged file1.txt file2.txt`
  3. **All Files:** `git restore --staged .`

**********************************************************************************

**Undoing a Commit in Git**

- **Git Reset:**
  - **Soft:** `git reset --soft HEAD~1` (keeps changes in staging).
  - **Mixed:** `git reset --mixed HEAD~1` (keeps changes in the working directory).
  - **Hard:** `git reset --hard HEAD~1` (discards all changes).

- **Git Revert:**
  - **Command:** `git revert HEAD` (creates a new commit to undo the last commit).
- **Note:** Use `git reset` cautiously in shared repositories; `git revert` is safer for collaborative environments.

**********************************************************************************

**Setting Tracking Information**

- **Purpose:** Automatically sync the local branch `lessons/commands` with a remote branch.
- **Command:** `git push --set-upstream origin lessons/commands`
  - This sets up automatic linkage, simplifying future `git push` and `git pull` commands.

######################################################################################################
**Understanding Git Remote Commands**

### `git remote`
- **Purpose**: Lists the remote connections you have associated with your repository.
- **Usage**: Simply typing `git remote` in your terminal within a Git repository will display the names of all remote handlers associated with that repository.

**********************************************************************************

### `git remote -v`
- **Purpose**: Shows all the remote URLs associated with the repository alongside their corresponding remote names.
- **Usage**: Typing `git remote -v` (the 'v' stands for 'verbose') provides a detailed list of all remote handlers (fetch and push URLs for each).

**********************************************************************************

### `git remote add [name] [url]`
- **Purpose**: Adds a new remote URL under a specified name to your local repository.
- **Usage**: Use this command when you need to set up a new connection to a remote repository. Example: `git remote add origin https://github.com/user/repo.git`
  - `[name]` is the shorthand name you assign to the remote URL for easy reference.
  - `[url]` is the actual URL to the remote repository.

**********************************************************************************

**Handling Pulls and Branch Management in Git**

### Pulling Without Specifying a Branch:
- **Issue**: Pulling without specifying a branch will fetch all branches but won't merge any changes into your currently checked-out branch.
- **Common Scenario**: If you executed `git pull` and did not see expected changes, it might be because the pull didn't automatically merge changes into your active branch.

### Switching to the Main Branch:
- **Command**: `git checkout main`
- **Purpose**: Switches the working directory to the `main` branch.
- **Next Steps**:
  - If the `main` branch exists locally but isn't set to track the remote `main` branch, you'll need to manually set tracking:
    ```bash
    git branch --set-upstream-to=origin/main main
    ```
  - After setting tracking, pull the changes to sync:
    ```bash
    git pull
    ```

This ensures your local `main` branch is updated with the latest changes from the remote `main` branch.

**********************************************************************************

### Setting Up Tracking Information:
- **Purpose**: Ensures your local branch knows which remote branch to interact with during push and pull operations.
- **Command**: 
  ```bash
  git branch --set-upstream-to=origin/main main

