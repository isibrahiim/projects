Configuring SSH Keys via Git Bash

Step 1: Generate a New SSH Key:
Open Git Bash and generate a new SSH key, replacing "your_email@example.com" with your GitHub email address:
ssh-keygen -t ed25519 -C "your_email@example.com"

When prompted, press Enter to save the key to the default location (usually ~/.ssh/id_ed25519). You can enter a passphrase for additional security or leave it empty.

Step 2: Start the SSH Agent:
Start the SSH agent in the background:
eval "$(ssh-agent -s)"

Step 3: Add Your SSH Key to the SSH Agent:
Add your SSH private key to the ssh-agent:
ssh-add ~/.ssh/id_ed25519

Step 4: Copy the SSH Public Key to Clipboard:
clip < ~/.ssh/id_ed25519.pub

or (on Windows Git Bash) use: 
cat ~/.ssh/id_ed25519.pub | clip

Please note: No, Linux users cannot directly use the cat ~/.ssh/id_ed25519.pub | clip command because clip is a clipboard utility specific to Windows.


Step 5: Add Your SSH Key to GitHub:
Go to GitHub.com and sign into your account.
Navigate to Settings by clicking on your profile picture at the top right of the page.
Click on SSH and GPG keys in the left sidebar.
Click on New SSH key, give it a descriptive title in the "Title" field, and paste your key into the "Key" field.
Click Add SSH key.

After completing these steps, the SSH section of your GitHub repository will no longer be empty; it will contain the public SSH key you've added. This setup allows you to interact with GitHub repositories using SSH, providing a secure connection without the need to enter your GitHub password each time.

Summery: 

In the command ssh-keygen -t ed25519, the -t option stands for "type." It specifies the type of key to generate, in this case, ed25519, which is a public-key algorithm used for creating SSH keys. This algorithm is recommended for its high security and performance.

the -C option stands for "comment." It allows you to attach a label or identifier to the SSH key, typically used for adding an email address or the name of the key holder as a means of identifying the key's purpose or owner more easily. This comment is especially useful when managing multiple keys.


What is SSH Agent?
The SSH agent is a key manager for SSH (Secure Shell). Here’s a concise explanation:
The SSH agent is a helper program that manages your SSH keys and certificates.
It holds your keys in memory, unencrypted, and makes them available for use by SSH.
It saves you from typing your passphrase every time you connect to a server.
The agent runs separately from the SSH client and usually starts automatically when you run SSH after a reboot1.
How Does It Work?
When you use SSH, the client program (like ssh from OpenSSH) typically runs for the duration of a remote login session.
The client looks for your private key in a file (e.g., .ssh/id_rsa) in your home directory.
For added security, the private key is often stored in an encrypted form, with the encryption key derived from a passphrase you’ve memorized.
To avoid typing the passphrase repeatedly, users run the ssh-agent.
The agent stores unencrypted keys in memory and communicates with SSH clients using a Unix domain socket2.
Security Considerations:
The ssh-agent creates a socket that allows connections from SSH.
Anyone who can connect to this socket also has access to the agent.
Permissions are set as in a typical Linux or Unix system.
The root user on the local system must be trustworthy because it can read the key file directly.
If the agent connection is forwarded to a remote system, trustworthiness of the root user on the other end is also crucial2.

Execute eval "$(ssh-agent -s)" in your shell.
This command starts the agent and sets up necessary environment variables





